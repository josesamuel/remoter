package remoter.compiler.builder;


import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;

import java.util.List;

import javax.annotation.processing.Messager;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.TypeParameterElement;
import javax.lang.model.type.TypeMirror;

import remoter.RemoterProxy;
import remoter.RemoterProxyListener;
import remoter.RemoterStub;

/**
 * A {@link RemoteBuilder} that knows how to build the proxy and stub classes.
 * This uses other builders internally to build the fields and methods.
 */
class ClassBuilder extends RemoteBuilder {

    static final String PROXY_SUFFIX = "_Proxy";
    static final String STUB_SUFFIX = "_Stub";

    protected ClassBuilder(Messager messager, Element element) {
        super(messager, element);
    }

    public JavaFile.Builder buildProxyClass() {
        ClassName proxyClassName = getProxyClassName();

        TypeSpec.Builder proxyClassBuilder = TypeSpec
                .classBuilder(proxyClassName.simpleName())
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(ClassName.get(RemoterProxy.class))
                .addSuperinterface(TypeName.get(getRemoterInterfaceElement().asType()));


        for (TypeParameterElement typeParameterElement : ((TypeElement) getRemoterInterfaceElement()).getTypeParameters()) {
            List<? extends TypeMirror> bounds =  typeParameterElement.getBounds();
            if (bounds.isEmpty() || getBindingManager().getTypeUtils().isSameType(getBindingManager().getType("java.lang.Object"), bounds.get(0))){
                proxyClassBuilder.addTypeVariable(TypeVariableName.get(typeParameterElement.toString()));
            } else {
                proxyClassBuilder.addTypeVariable(TypeVariableName.get(typeParameterElement.toString(), TypeName.get(bounds.get(0))));
            }
        }

        proxyClassBuilder.addType(getDeathRecipientWrapper());

        //constructor
        proxyClassBuilder.addMethod(MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("Initialize this {@link " + getProxyClassName().simpleName() + "} with the given {@link IBinder}\n\n")
                .addJavadoc("@param binder An {@link IBinder} that exposes a remote {@link " + getRemoterInterfaceClassName() + "}\n")
                .addParameter(ClassName.get("android.os", "IBinder"), "binder")
                .addStatement("this.mRemote = binder")
                .addStatement("this._binderID = __getStubID()")
                .addStatement("this._stubProcess = __getStubProcessID()")
                .build());


        getBindingManager().getFieldBuilder(getRemoterInterfaceElement()).addProxyFields(proxyClassBuilder);
        getBindingManager().getMethoddBuilder(getRemoterInterfaceElement()).addProxyMethods(proxyClassBuilder);

        proxyClassBuilder.addJavadoc("Wraps a remote {@link IBinder} that implements {@link " + getRemoterInterfaceClassName() + "} interface\n");
        proxyClassBuilder.addJavadoc("<p>\n");
        proxyClassBuilder.addJavadoc("Autogenerated by <a href=\"https://bit.ly/Remoter\">Remoter</a>\n");
        proxyClassBuilder.addJavadoc("@see " + getStubClassName().simpleName() + "\n");

        return JavaFile.builder(proxyClassName.packageName(), proxyClassBuilder.build());
    }


    public JavaFile.Builder buildStubClass() {
        ClassName stubClassName = getStubClassName();

        TypeSpec.Builder stubClassBuilder = TypeSpec
                .classBuilder(stubClassName.simpleName())
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(ClassName.get(RemoterStub.class))
                .superclass(TypeName.get(getBindingManager().getType("android.os.Binder")));

        for (TypeParameterElement typeParameterElement : ((TypeElement) getRemoterInterfaceElement()).getTypeParameters()) {
            List<? extends TypeMirror> bounds =  typeParameterElement.getBounds();
            if (bounds.isEmpty() || getBindingManager().getTypeUtils().isSameType(getBindingManager().getType("java.lang.Object"), bounds.get(0))){
                stubClassBuilder.addTypeVariable(TypeVariableName.get(typeParameterElement.toString()));
            } else {
                stubClassBuilder.addTypeVariable(TypeVariableName.get(typeParameterElement.toString(), TypeName.get(bounds.get(0))));
            }
        }

        stubClassBuilder.addType(getBinderWrapper());

        //constructor
        stubClassBuilder.addMethod(MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("Initialize this {@link " + getStubClassName().simpleName() + "} with the given {@link " + getRemoterInterfaceClassName() + "} implementation \n\n")
                .addJavadoc("@param serviceImpl An implementation of {@link " + getRemoterInterfaceClassName() + "}\n")
                .addParameter(TypeName.get(getRemoterInterfaceElement().asType()), "serviceImpl")
                .addStatement("this.serviceImpl = serviceImpl")
                .addStatement("this.binderWrapper = new BinderWrapper(this)")
                .addStatement("this.attachInterface(binderWrapper, DESCRIPTOR)")
                .build());


        getBindingManager().getFieldBuilder(getRemoterInterfaceElement()).addStubFields(stubClassBuilder);
        getBindingManager().getMethoddBuilder(getRemoterInterfaceElement()).addStubMethods(stubClassBuilder);

        stubClassBuilder.addJavadoc("Wraps a {@link " + getRemoterInterfaceClassName() + "} implementation and expose it as a remote {@link IBinder}\n");
        stubClassBuilder.addJavadoc("<p>\n");
        stubClassBuilder.addJavadoc("Autogenerated by <a href=\"https://bit.ly/Remoter\">Remoter</a>\n");
        stubClassBuilder.addJavadoc("@see " + getProxyClassName().simpleName() + "\n");

        return JavaFile.builder(stubClassName.packageName(), stubClassBuilder.build());
    }

    /**
     * Add the static inner Binder wrapper
     */
    private TypeSpec getBinderWrapper() {
        TypeSpec.Builder staticBinderWrapperClassBuilder = TypeSpec
                .classBuilder("BinderWrapper")
                .addModifiers(Modifier.PRIVATE)
                .addModifiers(Modifier.STATIC)
                .addField(ClassName.get("android.os", "IBinder"), "binder", Modifier.PRIVATE)
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(ClassName.get("android.os", "IBinder"), "binder")
                        .addStatement("this.binder = binder")
                        .build())
                .addMethod(MethodSpec.methodBuilder("asBinder")
                        .addModifiers(Modifier.PUBLIC)
                        .addAnnotation(Override.class)
                        .returns(ClassName.get("android.os", "IBinder"))
                        .addStatement("return binder")
                        .build())
                .addSuperinterface(ClassName.get("android.os", "IInterface"));

        return staticBinderWrapperClassBuilder.build();
    }

    /**
     * Add the static inner DeathRecipient wrapper
     */
    private TypeSpec getDeathRecipientWrapper() {
        TypeSpec.Builder staticBinderWrapperClassBuilder = TypeSpec
                .classBuilder("DeathRecipient")
                .addModifiers(Modifier.PRIVATE)
                .addModifiers(Modifier.STATIC)
                .addField(RemoterProxyListener.class, "proxyListener", Modifier.PRIVATE)
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(RemoterProxyListener.class, "proxyListener")
                        .addStatement("this.proxyListener = proxyListener")
                        .build())
                .addMethod(MethodSpec.methodBuilder("binderDied")
                        .addModifiers(Modifier.PUBLIC)
                        .addAnnotation(Override.class)
                        .beginControlFlow("if (proxyListener != null)")
                        .addStatement("proxyListener.onProxyDead()")
                        .endControlFlow()
                        .build())
                .addSuperinterface(ClassName.get("android.os", "IBinder.DeathRecipient"));

        return staticBinderWrapperClassBuilder.build();
    }

    private ClassName getStubClassName() {
        return ClassName.get(getRemoterInterfacePackageName(), getRemoterInterfaceClassName() + STUB_SUFFIX);
    }

    private ClassName getProxyClassName() {
        return ClassName.get(getRemoterInterfacePackageName(), getRemoterInterfaceClassName() + PROXY_SUFFIX);
    }

}

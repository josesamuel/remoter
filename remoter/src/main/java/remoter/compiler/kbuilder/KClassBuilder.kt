package remoter.compiler.kbuilder

import com.squareup.kotlinpoet.*
import remoter.RemoterProxy
import remoter.RemoterProxyListener
import remoter.RemoterStub
import javax.lang.model.element.Element
import javax.lang.model.element.TypeElement

/**
 */
internal class KClassBuilder(element: Element, bindingManager: KBindingManager) : KRemoterBuilder(element, bindingManager) {

    companion object {
        const val PROXY_SUFFIX = "_Proxy"
        const val STUB_SUFFIX = "_Stub"

    }

    private val proxyClassName = remoterInterfaceClassName + PROXY_SUFFIX
    private val stubClassName = remoterInterfaceClassName + STUB_SUFFIX


    /**
     * Returns the file spec to generate
     */
    fun generateProxy(): FileSpec {


        val fileSpecBuilder = FileSpec.builder(remoterInterfacePackageName, proxyClassName)

        val proxyBuilder = TypeSpec.classBuilder(proxyClassName)
                .addKdoc("Wraps a remote [IBinder] that implements [$remoterInterfaceClassName] interface\n")
                .addKdoc("<p/>\n")
                .addKdoc("@param remoteBinder An [IBinder] that exposes a remote [$remoterInterfaceClassName]\n\n")
                .addKdoc("<p/>\n")
                .addKdoc("Autogenerated by <a href=\"https://bit.ly/Remoter\">Remoter</a>\n")
                .addAnnotation(AnnotationSpec.builder(Suppress::class).addMember("\"UNCHECKED_CAST\"").build())
                .addModifiers(KModifier.PUBLIC)
                .addModifiers(KModifier.OPEN)
                .addSuperinterface(RemoterProxy::class.java)
                .addSuperinterface(remoterInterfaceElement.asType().asTypeName())
                .primaryConstructor(FunSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder("remoteBinder",
                                ClassName("android.os", "IBinder").copy(true))
                                //.addModifiers(KModifier.PRIVATE)
                                .build()).build())

                .addProperty(PropertySpec.builder("remoteBinder", ClassName("android.os", "IBinder")
                        .copy(true))
                        .mutable()
                        .addModifiers(KModifier.PRIVATE)
                        .initializer("remoteBinder")
                        .build())

        bindingManager.getFieldBuilder(remoterInterfaceElement).addProxyFields(proxyBuilder)


        if (bindingManager.hasRemoterBuilder()) {
            proxyBuilder.addFunction(FunSpec.constructorBuilder().addParameter(ParameterSpec.builder("serviceConnector",
                    ClassName("remoter.builder", "IServiceConnector"))
                    .build())
                    .addKdoc("Initialize this with a [remoter.builder.IServiceConnector] that connects to service using suspend connect")
                    .addStatement("this._remoterServiceConnector = serviceConnector")
                    .beginControlFlow("serviceConnector.onServiceDisconnect")
                    .addStatement("_serviceInitComplete = kotlinx.coroutines.CompletableDeferred<Boolean>()")
                    .endControlFlow()
                    .beginControlFlow("serviceConnector.onServiceConnect")
                    .addStatement("__initServiceConnection()")
                    .endControlFlow()
                    .callThisConstructor("null")
                    .build())


            proxyBuilder.addFunction(FunSpec.constructorBuilder()
                    .addParameter("context", ClassName("android.content", "Context"))
                    .addParameter("serviceIntentAction", String::class)
                    .addParameter(ParameterSpec.builder("flags", Int::class).defaultValue("Context.BIND_AUTO_CREATE") .build())
                    .callThisConstructor(CodeBlock.of("%T.of(context, serviceIntentAction, flags)", ClassName("remoter.builder", "ServiceConnector")))
                    .addKdoc(CodeBlock.builder()
                        .add("Creates an instance of this proxy that connects to a service exposed through the given [serviceIntentAction]\n")
                        .add("@param flags Optional flags to use while binding with service. Default use [Context.BIND_AUTO_CREATE]")
                        .build()
                    )
                    .build())

            proxyBuilder.addFunction(FunSpec.constructorBuilder()
                    .addParameter("context", ClassName("android.content", "Context"))
                    .addParameter("explicitServiceIntent", ClassName("android.content", "Intent"))
                    .addParameter(ParameterSpec.builder("flags", Int::class).defaultValue("Context.BIND_AUTO_CREATE") .build())
                    .addKdoc(CodeBlock.builder()
                        .add("Creates an instance of this proxy that connects to a service exposed through the given [explicitServiceIntent]\n")
                        .add("@param flags Optional flags to use while binding with service. Default use [Context.BIND_AUTO_CREATE]")
                        .build()
                    )
                    .callThisConstructor("ServiceConnector.of(context, explicitServiceIntent, flags)")
                    .build())

            proxyBuilder.addFunction(FunSpec.builder("__initServiceConnection")
                    .addModifiers(KModifier.PRIVATE)
                    .beginControlFlow("_proxyScope.%M", MemberName("kotlinx.coroutines", "launch"))
                    .addStatement("_binderID = __remoter_getStubID_sus()")
                    .addStatement("_stubProcess = __remoter_getStubProcessID_sus()")
                    .addStatement("_serviceInitComplete.complete(true)")
                    .endControlFlow()
                    .build()
            )

        }

        for (typeParameterElement in (remoterInterfaceElement as TypeElement).typeParameters) {
            proxyBuilder.addTypeVariable(TypeVariableName(typeParameterElement.toString()))
        }

        proxyBuilder.addType(buildDeathRecepient())

        bindingManager.getFunctiondBuilder(remoterInterfaceElement).addProxyMethods(proxyBuilder)

        fileSpecBuilder.addType(proxyBuilder.build())


        return fileSpecBuilder.build()
    }


    /**
     * Returns the file spec to generate
     */
    fun generateStub(): FileSpec {
        val fileSpecBuilder = FileSpec.builder(remoterInterfacePackageName, stubClassName)


        val stubClassBuilder = TypeSpec.classBuilder(stubClassName)
                .addModifiers(KModifier.PUBLIC)
                .addModifiers(KModifier.OPEN)
                .addSuperinterface(RemoterStub::class.java)
                .addKdoc("Wraps a [$remoterInterfaceClassName] implementation and expose it as a remote [IBinder]\\n")
                .addKdoc("Initialize this [$stubClassName] with the given [$remoterInterfaceClassName] implementation \n\n")
                .addAnnotation(AnnotationSpec.builder(Suppress::class).addMember("\"UNCHECKED_CAST\"").build())
                .superclass(bindingManager.getType("android.os.Binder").asTypeName())

        for (typeParameterElement in (remoterInterfaceElement as TypeElement).typeParameters) {
            stubClassBuilder.addTypeVariable(TypeVariableName(typeParameterElement.toString()))
        }

        stubClassBuilder.addType(getBinderWrapper())


        stubClassBuilder.primaryConstructor(FunSpec.constructorBuilder()
                .addParameter(ParameterSpec.builder("serviceImpl", remoterInterfaceElement.asType().asTypeName().copy(true))
                        //.addModifiers(KModifier.PRIVATE)
                        .build())
                .build())

        stubClassBuilder.addProperty(PropertySpec.builder("serviceImpl", remoterInterfaceElement.asType().asTypeName().copy(true))
                .mutable()
                .addModifiers(KModifier.PRIVATE)
                .initializer("serviceImpl")
                .build())


        bindingManager.getFieldBuilder(remoterInterfaceElement).addStubFields(stubClassBuilder)

        stubClassBuilder.addInitializerBlock(CodeBlock
                .builder()
                .addStatement("this.attachInterface(binderWrapper, DESCRIPTOR)")
                .build())


        bindingManager.getFunctiondBuilder(remoterInterfaceElement).addStubMethods(stubClassBuilder)

        fileSpecBuilder.addType(stubClassBuilder.build())


        return fileSpecBuilder.build()
    }

    private fun buildDeathRecepient() =
            TypeSpec.classBuilder("DeathRecipient")
                    .addModifiers(KModifier.PRIVATE)
                    .addSuperinterface(ClassName("android.os", "IBinder.DeathRecipient"))
                    .primaryConstructor(FunSpec.constructorBuilder()
                            .addParameter(ParameterSpec.builder("proxyListener", RemoterProxyListener::class.asTypeName()
                                    .copy(nullable = true))
                                    //.addModifiers(KModifier.PRIVATE)
                                    .build()).build())

                    .addProperty(PropertySpec.builder("proxyListener", RemoterProxyListener::class.asTypeName().copy(nullable = true),
                            KModifier.PRIVATE)
                            .mutable()
                            .initializer("proxyListener")
                            .build())
                    .addFunction(FunSpec.builder("binderDied")
                            .addModifiers(KModifier.OVERRIDE)
                            .addCode("proxyListener?.onProxyDead()")
                            .build())

                    .addFunction(FunSpec.builder("unregister")
                            .addModifiers(KModifier.PUBLIC)
                            .addCode("proxyListener = null")
                            .build())


                    .build()


    /**
     * Add the static inner Binder wrapper
     */
    private fun getBinderWrapper() =
            TypeSpec.classBuilder("BinderWrapper")
                    .addModifiers(KModifier.PRIVATE)
                    .addProperty(
                            PropertySpec.builder("binder", ClassName("android.os", "IBinder").copy(true))
                                    .mutable()
                                    .addModifiers(KModifier.PUBLIC)
                                    .initializer("binder")
                                    .build())
                    .primaryConstructor(FunSpec.constructorBuilder()
                            .addParameter(ParameterSpec.builder("binder", ClassName("android.os", "IBinder").copy(true))
                                   // .addModifiers(KModifier.PUBLIC)
                                    .build()).build())
                    .addFunction(FunSpec.builder("asBinder")
                            .addModifiers(KModifier.PUBLIC)
                            .addModifiers(KModifier.OVERRIDE)
                            .returns(ClassName("android.os", "IBinder").copy(true))
                            .addStatement("return binder")
                            .build())
                    .addSuperinterface(ClassName("android.os", "IInterface")).build()


}